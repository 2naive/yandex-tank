.TH lunapark 1 "June 6, 2012" "" "LUNAPARK"
.SH NAME
lunapark \- an utility for measuring performance of web servers

.SH SYNOPSIS
.B lunapark ammo_file | {-c |--config} [config_file] ammo_file | {-s| --skip-step} ammo_file | {-o|--step-only} ammo_file |  {-g | --gatling} ammo_file | ammo_file --script | --clear | --clearall | ammo_file {-p|--phantomlog} phout_file | --manual-start ammo_file | {-i|--instances} <NUM> ammo_file | --address <IP>:<PORT> ammo_file

.SH DESCRIPTION
This manual page explains the using lunapark utility
.B lunapark
program. This program is a high performance hit-based utility for web servers testing. 

.SH OPTIONS
.PP
\fB-c\fP ,\fB --config exec\fP lunapark with given configuration file config_file. By default load.conf is used, located in your current directory.  Execution without params creates config_file with default options.
.PP
\fB-s\fP, \fB--skip-step\fP run test without generation timestamped requests file, using already existed ammo.stpd from previous tests. Useful when you need exactly the same test but don't want to wait ammo.stpd generation. Needs ammo.stpd and lp.conf.
.PP
\fB-o\fP,\fB --step-only\fP prepare timestamped requests file for further tests execution with -s option. 
.PP
\fB-g\fP,\fB --gatling\fP enable several local IP addresses usage in test. Effective in avoiding sockets/local ports depletion.
.PP
\fB--clear\fP clear current directory from tests artefacts but keep ./logs directory. Use --clearall for complete artefacts deletion, with ./logs.
.PP
\fB-p\fP ,\fB --phantomlog\fP load to lunapark custom tests results generated by any other utility. Test results file must be in phout_file format.
.PP
\fB--manual-start\fP lunapark generates all data for test execution and requests confirmation for start. Helpful in giving load at precisely chosen time.
.PP
\fB-i \fP, \fB--instances\fP set instances number. Overrides value in config_file.
.PP
\fB--address\fP set target's IP and port. Overrides values in config_file.

.B
\fB ammo_file\fP
file with requests in req-style or uri-style.
.br
.B
\fB phout_file\fP
file with non-aggregated per-request data receiving during the test.
.br
.B
\fB phout_file\fP
configuration file described
.br
.SH FILES
    fantom.py
    preproc.pl
    stepper.py
    Lunapark.pm
    lunapark
    load.conf.example
    db.conf
    prd.pl
    yandex_load_lunapark
    yandex_load_lunapark/stepper.py
    yandex_load_lunapark/__init__.py
    yandex_load_lunapark/status.py
.SH NOTES
Be careful with config_file tuning. Incorrect configuraton could lead to network devices or/and web servers overload.
.SH EXAMPLE
Simple configuration file making requests to / with constant rate 10 requests per second for 10 minutes. Server's IP and port are 127.0.0.1:80
    #### BEGIN ####
    address=127.0.0.1:80 #Target's address and port
    load = const (10,10m) #Load scheme
    header_http = 1.1
    header = [Host: www.target.example.com]
    header = [Connection: close]
    uri = /
    #### END ####

    More complex example: ammo_file in req_style, web server has ipv6/ssl enabled, load profile is combined from different primitives.
    Also there are enabled request/answer logging and jabber notification. Test results are uploading to Lunapark framework for detailed analysis
    #### BEGIN ####
    address=2a02:6b8:0:c1f::100:1:80 #Target's address and port
    load = const (10,10m) line(10,100,10m) step(100,500,100,10m) #Load scheme
    ssl = 1
    inform = username
    task = LOAD-999
    #### END ####